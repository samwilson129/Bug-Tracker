package main.java.model;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class Report {
    private int id;
    private String generatedBy;
    private String project;
    private List<String> bugs_summaries;
    private LocalDateTime generatedDate;
    private ReportType reportType = ReportType.STANDARD; // Default report type

    // Enum for different report types
    public enum ReportType {
        STANDARD, DETAILED, SUMMARY
    }

    public Report(int id, String generatedBy, String project, List<String> bugs_summaries,
            LocalDateTime generatedDate) {
        this.id = id;
        this.generatedBy = generatedBy;
        this.project = project;
        this.bugs_summaries = bugs_summaries;
        this.generatedDate = generatedDate;
    }

    public Report(int id, String generatedBy, String project, List<String> bugs_summaries,
            LocalDateTime generatedDate, ReportType reportType) {
        this.id = id;
        this.generatedBy = generatedBy;
        this.project = project;
        this.bugs_summaries = bugs_summaries;
        this.generatedDate = generatedDate;
        this.reportType = reportType;
    }

    public int getter_id() {
        return id;
    }

    public String getter_generatedBy() {
        return generatedBy;
    }

    public String getter_project() {
        return project;
    }

    public List<String> getter_bugs_summaries() {
        return bugs_summaries;
    }

    public LocalDateTime getter_generatedDate() {
        return generatedDate;
    }
    
    public ReportType getReportType() {
        return reportType;
    }

    public void setter_id(int id) {
        this.id = id;
    }

    public void setter_generatedBy(String generatedBy) {
        this.generatedBy = generatedBy;
    }

    public void setter_project(String project) {
        this.project = project;
    }

    public void setter_bugs_summaries(List<String> bugs_summaries) {
        this.bugs_summaries = bugs_summaries;
    }

    public void setter_generatedDate(LocalDateTime generatedDate) {
        this.generatedDate = generatedDate;
    }
    
    public void setReportType(ReportType reportType) {
        this.reportType = reportType;
    }
    
    // Template Method Pattern implementation
    
    /**
     * Template method that defines the skeleton of the report generation algorithm
     * @return The formatted report as a string
     */
    public final String generateFormattedReport() {
        StringBuilder report = new StringBuilder();
        
        // These steps will be the same for all reports
        addReportHeader(report);
        addReportMetadata(report);
        
        // This step varies based on report type (OCP implementation)
        addReportContent(report);
        
        // These steps will be the same for all reports
        addReportSummary(report);
        addReportFooter(report);
        
        return report.toString();
    }
    
    // These are the concrete methods that implement parts of the algorithm
    protected void addReportHeader(StringBuilder report) {
        report.append("=== BUG TRACKER REPORT ===\n\n");
    }
    
    protected void addReportMetadata(StringBuilder report) {
        report.append("Report ID: ").append(id).append("\n");
        report.append("Generated By: ").append(generatedBy).append("\n");
        report.append("Project: ").append(project).append("\n");
        report.append("Date: ").append(generatedDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))).append("\n\n");
    }
    
    // This method varies based on report type (OCP implementation)
    protected void addReportContent(StringBuilder report) {
        switch (reportType) {
            case DETAILED:
                addDetailedReportContent(report);
                break;
            case SUMMARY:
                addSummaryReportContent(report);
                break;
            case STANDARD:
            default:
                addStandardReportContent(report);
                break;
        }
    }
    
    // Different implementations for different report types
    protected void addStandardReportContent(StringBuilder report) {
        report.append("BUGS SUMMARY:\n");
        for (int i = 0; i < bugs_summaries.size(); i++) {
            report.append(i + 1).append(". ").append(bugs_summaries.get(i)).append("\n");
        }
        report.append("\n");
    }
    
    protected void addDetailedReportContent(StringBuilder report) {
        report.append("DETAILED BUGS REPORT:\n");
        report.append("====================\n\n");
        for (int i = 0; i < bugs_summaries.size(); i++) {
            report.append("BUG #").append(i + 1).append("\n");
            report.append("Description: ").append(bugs_summaries.get(i)).append("\n");
            report.append("Status: ").append("Open").append("\n");
            report.append("Priority: ").append("Medium").append("\n");
            report.append("------------------\n");
        }
        report.append("\n");
    }
    
    protected void addSummaryReportContent(StringBuilder report) {
        report.append("EXECUTIVE SUMMARY:\n");
        report.append("Total bugs identified: ").append(bugs_summaries.size()).append("\n");
        if (!bugs_summaries.isEmpty()) {
            report.append("Key issues: ").append(bugs_summaries.get(0));
            if (bugs_summaries.size() > 1) {
                report.append(", ").append(bugs_summaries.get(1));
            }
            report.append("\n");
        }
        report.append("\n");
    }
    
    protected void addReportSummary(StringBuilder report) {
        report.append("Total bugs: ").append(bugs_summaries.size()).append("\n\n");
    }
    
    protected void addReportFooter(StringBuilder report) {
        report.append("=== END OF REPORT ===");
    }
}